---
author: admin
date: '2008-06-03 10:27:49'
layout: post
slug: obtaining-overrepresented-motifs-in-dna-sequences-part-7
status: publish
title: Obtaining overrepresented motifs in DNA sequences, part 7
wordpress_id: '109'
? ''
: - bioinformatics
  - motifs
  - motifs
  - overrepresented
  - Phase 2
  - python
---

Continuing on Mike's functions to obtain motif quorums. We see function
3, 4 and 5. Function get\_quorums\_03, uses an old friend of the blog,
`sets`. Recall that `sets` are very similar to lists, but their are
unordered and items are unique. [sourcecode language='python']def
get\_quorums\_03(seqs, mlen): """ add seq id\_no to a set use explicit
counter to create seq\_no """ quorum = defaultdict(set) id\_no = 0 for
seq in seqs: id\_no += 1 for n in range(len(seq)-mlen):
quorum[seq[n:n+mlen]].add(id\_no) return quorum[/sourcecode] Basically,
the sequence numbers (an incremented counter) are added to a defaultdict
which was initialized as a set. This way you don't need to check for the
existence of the sequence number in the defaultdict list and count on
the ability of `set` of being unique. Function 4 is very similar to
function 3 with the difference of using enumerate (as in function 02) to
make the sequence numbers. [sourcecode language='python']def
get\_quorums\_04(seqs, mlen): """ add seq id\_no to a set use
'enumerate' to create seq\_no """ quorum = defaultdict(set) for id\_no,
seq in enumerate(seqs): for n in range(len(seq)-mlen):
quorum[seq[n:n+mlen]].add(id\_no) return quorum[/sourcecode] Function 5
adds a twist, which is to have an enumerate to set the sequence range
(motif/word width) start and stop. This way the window is sliding based
on the tuple created by the enumerate method and not on the slicing that
were used in all other functions. Again, a defaultdict is initialized as
set and the sequence numbers are generated by an enumerate. [sourcecode
language='python']def get\_quorums\_05(seqs, mlen): """ add seq id\_no
to a set use 'enumerate' to create seq\_no use enumerate(range(...)) to
create start/stop indices for motif """ quorum = defaultdict(set) for
id\_no, seq in enumerate(seqs): for s, e in enumerate(range(mlen,
len(seq))): quorum[seq[s:e]].add(id\_no) return quorum[/sourcecode]
